/*
 * TerrainConfigurer.java
 * 
 * This file is part of Tectonic Tiles.
 * Tectonic Tiles is a random terrain generator inspired by plate tectonics.
 * Copyright (C) 2020 Javier Centeno Vega
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */

package io;

import java.awt.image.RenderedImage;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import core.Crease;
import core.Terrain;
import parameter.parameter.Configurer;
import parameter.parameter.LongParameter;
import random.RandomGenerator;

/**
 * Configurer which handles terrain generation, import, export, display and the
 * handling of parameters related to terrain generation.
 *
 * @author Javier Centeno Vega <jacenve@telefonica.net>
 * @version 0.3
 * @since 0.3
 * @param <T> The type of terrain handled by this configurer.
 * @see core.Terrain
 *
 */
public abstract class TerrainConfigurer<T extends Terrain<?>> extends Configurer {

	////////////////////////////////////////////////////////////////////////////////
	// Class field

	/**
	 * The default seed used when no seed is picked, equal to the long value
	 * 1_234_567_890_987_654_321L.
	 */
	public static final long DEFAULT_SEED = 1234567890987654321L;

	////////////////////////////////////////////////////////////////////////////////
	// Parameters

	private final LongParameter seed;
	protected T terrain;

	////////////////////////////////////////////////////////////////////////////////
	// Constructors

	/**
	 * Construct a new terrain configurer with default parameters.
	 * 
	 * @param nameKey The internationalization key for the name of the configurer.
	 */
	public TerrainConfigurer(String nameKey) {
		super(nameKey);
		this.seed = new LongParameter("terrain.seed", DEFAULT_SEED, null, null, false);
		this.getParameters().add(this.seed);
	}

	////////////////////////////////////////////////////////////////////////////////
	// Accessors

	/**
	 * Get the seed parameter used to start the random generator.
	 * 
	 * @return The seed parameter used to start the random generator.
	 */
	public LongParameter getSeed() {
		return seed;
	}

	/**
	 * Get the terrain generated by this configurer if a terrain has been generated.
	 * 
	 * @return A terrain, or null if no terrain has been generated.
	 */
	public T getTerrain() {
		return terrain;
	}

	////////////////////////////////////////////////////////////////////////////////
	// Instance methods

	/**
	 * Generate a terrain using a random generator and a crease.
	 * 
	 * @param randomGenerator A random generator.
	 * @param crease          A crease.
	 * @return A terrain generated using the given random generator and crease.
	 */
	public abstract T generate(RandomGenerator randomGenerator, Crease crease);

	/**
	 * Render the generated terrain as an image.
	 * 
	 * @return An image displaying the generated terrain if a terrain has been
	 *         generated.
	 * @throws NullPointerException If no terrain has been generated yet.
	 */
	public abstract RenderedImage toImage();

	/**
	 * Get the list of supported formats for importing and exporting this terrain.
	 * The importTerrain() and exportTerrain() methods should take one of these
	 * formats as an argument.
	 * 
	 * @return A string array representing all allowed formats for importing and
	 *         exporting this terrain.
	 */
	public abstract String[] getFormatNames();

	/**
	 * Sets this terrain configurer's terrain to a terrain read from the given input
	 * stream using the given format.
	 * 
	 * @param formatName A file format. Must be in the list returned by the method
	 *                   getFormatNames().
	 * @param input      An input stream.
	 * @throws IOException If an I/O error occurs.
	 */
	public abstract void importTerrain(String formatName, InputStream input) throws IOException;

	/**
	 * Writes this terrain configurer's terrain to the given output stream using the
	 * given format.
	 * 
	 * @param formatName A file format. Must be in the list returned by the method
	 *                   getFormatNames().
	 * @param output     An output stream.
	 * @throws IOException If an I/O error occurs.
	 */
	public abstract void exportTerrain(String formatName, OutputStream output) throws IOException;

}
